package com.Event_package.controller;

import com.Event_package.entity.Event_backend;
import com.Event_package.repository.EventRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/events")
@CrossOrigin("http://localhost:5173")
public class EventController {

    @Autowired
    private EventRepository eventRepository;

    private static final Logger logger = LoggerFactory.getLogger(EventController.class);

    // Use absolute path for better reliability
    private static final String UPLOAD_DIR = System.getProperty("user.dir") + "/src/main/resources/static/images/";

    // Create a new event with an image
    @PostMapping("/upload")
    public ResponseEntity<?> createEventWithImage(
            @RequestParam("name") String name,
            @RequestParam("date") String date,
            @RequestParam("location") String location,
            @RequestParam("description") String description,
            @RequestParam("image") MultipartFile image) {

        try {
            // Validate required parameters
            if (StringUtils.isEmpty(name) || StringUtils.isEmpty(date) ||
                StringUtils.isEmpty(location) || StringUtils.isEmpty(description)) {
                return ResponseEntity.badRequest().body("All fields are required");
            }

            if (image == null || image.isEmpty()) {
                return ResponseEntity.badRequest().body("Image is required");
            }

            // Validate and parse date
            LocalDate eventDate;
            try {
                eventDate = LocalDate.parse(date, DateTimeFormatter.ISO_DATE);
            } catch (DateTimeParseException e) {
                return ResponseEntity.badRequest().body("Invalid date format. Use YYYY-MM-DD");
            }

            // Create directory if it doesn't exist
            try {
                Files.createDirectories(Paths.get(UPLOAD_DIR));
            } catch (IOException e) {
                logger.error("Failed to create upload directory", e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Failed to create upload directory");
            }

            // Generate unique filename to prevent overwrites
            String originalFilename = StringUtils.cleanPath(image.getOriginalFilename());
            String fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
            String uniqueFileName = UUID.randomUUID().toString() + fileExtension;
            Path filePath = Paths.get(UPLOAD_DIR + uniqueFileName);

            // Validate image file
            String contentType = image.getContentType();
            if (contentType == null || !contentType.startsWith("image/")) {
                return ResponseEntity.badRequest().body("Only image files are allowed");
            }

            // Save image file
            try {
                Files.copy(image.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                logger.error("Failed to save image file", e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Failed to save image file");
            }

            // Create and save event
            Event_backend event = new Event_backend();
            event.setName(name);
            event.setDate(eventDate);
            event.setLocation(location);
            event.setDescription(description);
            event.setImage("/images/" + uniqueFileName);  // Relative path

            Event_backend savedEvent = eventRepository.save(event);
            return ResponseEntity.status(HttpStatus.CREATED).body(savedEvent);

        } catch (Exception e) {
            logger.error("Error creating event", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error creating event: " + e.getMessage());
        }
    }

    // Get all events
    @GetMapping
    public ResponseEntity<?> getAllEvents() {
        try {
            List<Event_backend> events = (List<Event_backend>) eventRepository.findAll();
            if (events.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No events found");
            }
            return ResponseEntity.ok(events);
        } catch (Exception e) {
            logger.error("Error fetching events", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error fetching events: " + e.getMessage());
        }
    }

    // Update event by ID
    @PutMapping("/{id}")
    public ResponseEntity<?> updateEvent(
            @PathVariable Long id,
            @RequestParam("name") String name,
            @RequestParam("date") String date,
            @RequestParam("location") String location,
            @RequestParam("description") String description,
            @RequestParam(value = "image", required = false) MultipartFile image) {

        try {
            Optional<Event_backend> optionalEvent = eventRepository.findById(id);
            if (optionalEvent.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Event not found");
            }

            // Check for required fields
            if (StringUtils.isEmpty(name) || StringUtils.isEmpty(date) ||
                StringUtils.isEmpty(location) || StringUtils.isEmpty(description)) {
                return ResponseEntity.badRequest().body("All fields except image are required.");
            }

            Event_backend event = optionalEvent.get();
            event.setName(name);

            try {
                event.setDate(LocalDate.parse(date, DateTimeFormatter.ISO_DATE));
            } catch (DateTimeParseException e) {
                return ResponseEntity.badRequest().body("Invalid date format. Use YYYY-MM-DD");
            }

            event.setLocation(location);
            event.setDescription(description);

            // Handle image upload if a new image is provided
            if (image != null && !image.isEmpty()) {
                String originalFilename = StringUtils.cleanPath(image.getOriginalFilename());
                String fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
                String uniqueFileName = UUID.randomUUID().toString() + fileExtension;
                Path filePath = Paths.get(UPLOAD_DIR + uniqueFileName);

                String contentType = image.getContentType();
                if (contentType == null || !contentType.startsWith("image/")) {
                    return ResponseEntity.badRequest().body("Only image files are allowed");
                }

                try {
                    Files.copy(image.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

                    // Delete old image if exists
                    if (event.getImage() != null && !event.getImage().isEmpty()) {
                        try {
                            Path oldFilePath = Paths.get(UPLOAD_DIR + event.getImage().replace("/images/", ""));
                            Files.deleteIfExists(oldFilePath);
                        } catch (IOException e) {
                            logger.warn("Failed to delete old image file", e);
                        }
                    }

                    event.setImage("/images/" + uniqueFileName);
                } catch (IOException e) {
                    logger.error("Failed to save new image file", e);
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body("Failed to save new image file");
                }
            }

            Event_backend updatedEvent = eventRepository.save(event);
            return ResponseEntity.ok(updatedEvent);

        } catch (Exception e) {
            logger.error("Error updating event", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error updating event: " + e.getMessage());
        }
    }

    // Delete event by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteEvent(@PathVariable Long id) {
        try {
            Optional<Event_backend> optionalEvent = eventRepository.findById(id);
            if (optionalEvent.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Event not found");
            }

            // Delete associated image file if it exists
            Event_backend event = optionalEvent.get();
            if (event.getImage() != null && !event.getImage().isEmpty()) {
                try {
                    Path filePath = Paths.get(UPLOAD_DIR + event.getImage().replace("/images/", ""));
                    Files.deleteIfExists(filePath);
                } catch (IOException e) {
                    logger.warn("Failed to delete image file", e);
                }
            }

            eventRepository.deleteById(id);
            return ResponseEntity.noContent().build();

        } catch (Exception e) {
            logger.error("Error deleting event", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error deleting event: " + e.getMessage());
        }
    }
}
